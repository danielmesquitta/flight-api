// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/danielmesquitta/flight-api/internal/app/server/handler"
	"github.com/danielmesquitta/flight-api/internal/app/server/middleware"
	"github.com/danielmesquitta/flight-api/internal/app/server/router"
	"github.com/danielmesquitta/flight-api/internal/config/env"
	"github.com/danielmesquitta/flight-api/internal/domain/usecase/flight"
	"github.com/danielmesquitta/flight-api/internal/pkg/jwtutil"
	"github.com/danielmesquitta/flight-api/internal/pkg/validator"
	"github.com/danielmesquitta/flight-api/internal/provider/cache/rediscache"
	"github.com/danielmesquitta/flight-api/internal/provider/flightapi"
	"github.com/danielmesquitta/flight-api/internal/provider/flightapi/amadeusapi"
	"github.com/danielmesquitta/flight-api/internal/provider/flightapi/mockflightapi"
	"github.com/danielmesquitta/flight-api/internal/provider/flightapi/serpapi"
	"testing"
)

// Injectors from wire.go:

// NewDev wires up the application in dev mode.
func NewDev(v validator.Validator, e *env.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	amadeusAPI := amadeusapi.NewAmadeusAPI(e)
	serpAPI := serpapi.NewSerpAPI(e)
	v2 := flightapi.NewFlightAPIs(amadeusAPI, serpAPI)
	searchFlightUseCase := flight.NewSearchFlightUseCase(v, v2)
	flightHandler := handler.NewFlightHandler(searchFlightUseCase)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, flightHandler)
	redisCache := rediscache.NewRedisCache(e)
	app := Build(middlewareMiddleware, routerRouter, redisCache)
	return app
}

// NewStaging wires up the application in staging mode.
func NewStaging(v validator.Validator, e *env.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	amadeusAPI := amadeusapi.NewAmadeusAPI(e)
	serpAPI := serpapi.NewSerpAPI(e)
	v2 := flightapi.NewFlightAPIs(amadeusAPI, serpAPI)
	searchFlightUseCase := flight.NewSearchFlightUseCase(v, v2)
	flightHandler := handler.NewFlightHandler(searchFlightUseCase)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, flightHandler)
	redisCache := rediscache.NewRedisCache(e)
	app := Build(middlewareMiddleware, routerRouter, redisCache)
	return app
}

// NewTest wires up the application in test mode.
func NewTest(v validator.Validator, e *env.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	mockFlightAPI := mockflightapi.NewMockFlightAPI(t)
	v2 := mockflightapi.NewMockFlightAPIs(mockFlightAPI)
	searchFlightUseCase := flight.NewSearchFlightUseCase(v, v2)
	flightHandler := handler.NewFlightHandler(searchFlightUseCase)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, flightHandler)
	redisCache := rediscache.NewRedisCache(e)
	app := Build(middlewareMiddleware, routerRouter, redisCache)
	return app
}

// NewProd wires up the application in prod mode.
func NewProd(v validator.Validator, e *env.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	amadeusAPI := amadeusapi.NewAmadeusAPI(e)
	serpAPI := serpapi.NewSerpAPI(e)
	v2 := flightapi.NewFlightAPIs(amadeusAPI, serpAPI)
	searchFlightUseCase := flight.NewSearchFlightUseCase(v, v2)
	flightHandler := handler.NewFlightHandler(searchFlightUseCase)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, flightHandler)
	redisCache := rediscache.NewRedisCache(e)
	app := Build(middlewareMiddleware, routerRouter, redisCache)
	return app
}
