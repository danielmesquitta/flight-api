// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockflightapi

import (
	"context"
	"time"

	"github.com/danielmesquitta/flight-api/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFlightAPI creates a new instance of MockFlightAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlightAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlightAPI {
	mock := &MockFlightAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFlightAPI is an autogenerated mock type for the FlightAPI type
type MockFlightAPI struct {
	mock.Mock
}

type MockFlightAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFlightAPI) EXPECT() *MockFlightAPI_Expecter {
	return &MockFlightAPI_Expecter{mock: &_m.Mock}
}

// SearchFlights provides a mock function for the type MockFlightAPI
func (_mock *MockFlightAPI) SearchFlights(ctx context.Context, origin string, destination string, date time.Time) ([]entity.Flight, error) {
	ret := _mock.Called(ctx, origin, destination, date)

	if len(ret) == 0 {
		panic("no return value specified for SearchFlights")
	}

	var r0 []entity.Flight
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Time) ([]entity.Flight, error)); ok {
		return returnFunc(ctx, origin, destination, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Time) []entity.Flight); ok {
		r0 = returnFunc(ctx, origin, destination, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Flight)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = returnFunc(ctx, origin, destination, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlightAPI_SearchFlights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFlights'
type MockFlightAPI_SearchFlights_Call struct {
	*mock.Call
}

// SearchFlights is a helper method to define mock.On call
//   - ctx
//   - origin
//   - destination
//   - date
func (_e *MockFlightAPI_Expecter) SearchFlights(ctx interface{}, origin interface{}, destination interface{}, date interface{}) *MockFlightAPI_SearchFlights_Call {
	return &MockFlightAPI_SearchFlights_Call{Call: _e.mock.On("SearchFlights", ctx, origin, destination, date)}
}

func (_c *MockFlightAPI_SearchFlights_Call) Run(run func(ctx context.Context, origin string, destination string, date time.Time)) *MockFlightAPI_SearchFlights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockFlightAPI_SearchFlights_Call) Return(flights []entity.Flight, err error) *MockFlightAPI_SearchFlights_Call {
	_c.Call.Return(flights, err)
	return _c
}

func (_c *MockFlightAPI_SearchFlights_Call) RunAndReturn(run func(ctx context.Context, origin string, destination string, date time.Time) ([]entity.Flight, error)) *MockFlightAPI_SearchFlights_Call {
	_c.Call.Return(run)
	return _c
}
