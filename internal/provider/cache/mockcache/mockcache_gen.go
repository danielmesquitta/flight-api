// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcache

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCache
func (_mock *MockCache) Delete(ctx context.Context, keys ...string) error {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - keys
func (_e *MockCache_Expecter) Delete(ctx interface{}, keys ...interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockCache_Delete_Call) Run(run func(ctx context.Context, keys ...string)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return(err error) *MockCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(ctx context.Context, keys ...string) error) *MockCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function for the type MockCache
func (_mock *MockCache) Scan(ctx context.Context, key string, value any) (bool, error) {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) (bool, error)); ok {
		return returnFunc(ctx, key, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) bool); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = returnFunc(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockCache_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *MockCache_Expecter) Scan(ctx interface{}, key interface{}, value interface{}) *MockCache_Scan_Call {
	return &MockCache_Scan_Call{Call: _e.mock.On("Scan", ctx, key, value)}
}

func (_c *MockCache_Scan_Call) Run(run func(ctx context.Context, key string, value any)) *MockCache_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *MockCache_Scan_Call) Return(ok bool, err error) *MockCache_Scan_Call {
	_c.Call.Return(ok, err)
	return _c
}

func (_c *MockCache_Scan_Call) RunAndReturn(run func(ctx context.Context, key string, value any) (bool, error)) *MockCache_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	ret := _mock.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
//   - expiration
func (_e *MockCache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockCache_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCache_Set_Call) Return(err error) *MockCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, expiration time.Duration) error) *MockCache_Set_Call {
	_c.Call.Return(run)
	return _c
}
